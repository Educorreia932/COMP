options {
    LOOKAHEAD=5;
}

PARSER_BEGIN(JMM)

public class JMM {
    public static void main(String[] args) {
        System.out.println("Write a Java-- program:");
        JMM jmm = new JMM(System.in);

        SimpleNode root = jmm.Program(); // Returns reference to root node
        root.dump(""); // Prints the tree on the screen

        System.out.println("Finished parsing");
    }
}

PARSER_END(JMM)

SKIP : {
    " " | "\r" | "\t" | "\n"
}

// Keywords

TOKEN : {
    <IMPORT: "import"> |
    <CLASS: "class"> |
    <EXTENDS: "extends"> |
    <PUBLIC: "public"> |
    <RETURN: "return"> |
    <STATIC: "static"> |
    <VOID: "void"> |
    <MAIN: "main"> |
    <STRING: "String"> |
    <TRUE: "true"> |
    <FALSE: "false"> |
    <INT: "int"> |
    <BOOLEAN: "boolean"> |
    <IF: "if"> |
    <ELSE: "else"> |
    <WHILE: "while"> |
    <THIS: "this"> |
    <NEW: "new"> |
    <LENGTH: "length">
}

// Delimiters

TOKEN : {
    <LEFT_PARENTHESES: "("> |
    <RIGHT_PARENTHESES: ")"> |
    <LEFT_BRACE: "{"> |
    <RIGHT_BRACE: "}"> |
    <LEFT_BRACKET: "["> |
    <RIGHT_BRACKET: "]"> |
    <SEMICOLON: ";"> |
    <COMMA: ",">
}

// Operators

TOKEN : {
    <ADD: "+"> |
    <SUB: "-"> |
    <MUL: "*"> |
    <DIV: "/"> |
    <ASSIGN: "="> |
    <DOT: "."> |
    <NOT: "!"> |
    <AND: "&&"> |
    <LT: "<">
}

// Symbols

TOKEN: {
    <IDENTIFIER:
        (["A"-"Z", "a"-"z", "$"](["0"-"9", "A"-"Z", "a"-"z", "$", "_"])*) |
        (["_"](["0"-"9", "A"-"Z", "a"-"z", "$", "_"])+)
    > |
    <INTEGER: (["0"-"9"])+>
}

SimpleNode Program(): {} {
    ImportDeclaration() |
    ClassDeclaration() |
    <EOF> {return jjtThis;}
}

void ImportDeclaration(): {} {
    <IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER>)* <SEMICOLON>
}

void ClassDeclaration(): {} {
    <CLASS> <IDENTIFIER> ("extends" <IDENTIFIER>)?
    <LEFT_BRACE> ( VarDeclaration() )? ( MethodDeclaration() )? <RIGHT_BRACE>
}

void VarDeclaration(): {} {
    Type() <IDENTIFIER> <SEMICOLON>
}

void MethodDeclaration(): {} {
    <PUBLIC>
    (
        (
            Type() <IDENTIFIER> <LEFT_PARENTHESES>
            ( Type() <IDENTIFIER> ("," Type() <IDENTIFIER>)* )?
            <RIGHT_PARENTHESES> <LEFT_BRACE>
        ) |
        (
            <STATIC> <VOID> <MAIN>
            <LEFT_PARENTHESES> <STRING> <LEFT_BRACKET> <RIGHT_BRACKET> <IDENTIFIER> <RIGHT_PARENTHESES> <LEFT_BRACE>
        )
    )
    ( VarDeclaration() )*
    ( Statement() )*
    ( <RETURN> Expression() <SEMICOLON> )?
    <RIGHT_BRACE>
}

void Type(): {} {
    ( <INT> <LEFT_BRACKET> <RIGHT_BRACKET> ) |
    <BOOLEAN> |
    <INT> |
    <IDENTIFIER>
}

void Statement(): {} {
    ( <LEFT_BRACE> ( Statement() )* <RIGHT_BRACE> ) |
    ( <IF> <LEFT_PARENTHESES> Expression() <RIGHT_PARENTHESES> Statement() <ELSE> Statement() ) |
    ( <WHILE> <LEFT_PARENTHESES> Expression() <RIGHT_PARENTHESES> Statement() ) |
    ( Expression() <SEMICOLON> ) |
    ( <IDENTIFIER> <ASSIGN> Expression() <SEMICOLON> ) |
    ( <IDENTIFIER> <LEFT_BRACKET> Expression() <RIGHT_BRACKET> <ASSIGN> Expression() <SEMICOLON> )
}

void Expression(): {} {
    (
        <INTEGER> |
        <TRUE> |
        <FALSE> |
        <IDENTIFIER> |
        <THIS> |
        ( <NEW> <INT> <LEFT_BRACKET> Expression() <RIGHT_BRACKET> ) |
        ( <NEW> <IDENTIFIER> <LEFT_PARENTHESES> <RIGHT_PARENTHESES>) |
        ( <NOT> Expression() ) |
        ( <LEFT_PARENTHESES> Expression() <RIGHT_PARENTHESES> )
    )
    _Expression()
}

void _Expression(): {} {
    (
        ( ( <AND> | <LT> | <ADD> | <SUB> | <MUL> | <DIV> ) Expression() ) |
        ( <LEFT_BRACKET> Expression() <RIGHT_BRACKET> ) |
        ( <DOT> <LENGTH> ) |
        ( <DOT> <IDENTIFIER> <LEFT_PARENTHESES> ( Expression() ( <COMMA> Expression() )* )? <RIGHT_PARENTHESES> )
    )
    Expression()
}



