options {
    LOOKAHEAD=1;
    NODE_SCOPE_HOOK = true;
}

PARSER_BEGIN(JMM)

import java.util.List;
import java.util.ArrayList;
import pt.up.fe.comp.jmm.report.Report;
import pt.up.fe.comp.jmm.report.ReportType;
import pt.up.fe.comp.jmm.report.Stage;
public class JMM {
    private List<Report> reports = new ArrayList();

    public static void main(String[] args) throws ParseException {
        System.out.println("Write a Java-- program:");
        JMM jmm = new JMM(System.in);

        SimpleNode root = jmm.Program(); // Returns reference to root node

        System.out.println("Finished parsing");
    }

    public List<Report> getReports() {
        return this.reports;
    }

    void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).put("line", Integer.toString(getToken(1).beginLine));
        ((SimpleNode)n).put("col", Integer.toString(getToken(1).beginColumn));
    }

    void jjtreeCloseNodeScope(Node n) {
    }
}

PARSER_END(JMM)

SKIP : {
    " " | "\r" | "\t" | "\n"
}

// Multi-line comment

SKIP : {
    "/*" : WithinComment
}

<WithinComment> SKIP : {
    "*/" : DEFAULT
}

<WithinComment> MORE : {
    <~[]>
}

// Single-line comment

SPECIAL_TOKEN : {
    <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n"|"\r"|"\r\n")>
}

// Keywords

TOKEN : {
    <IMPORT: "import">
    | <CLASS: "class">
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <TRUE: "true">
    | <FALSE: "false">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <THIS: "this">
    | <NEW: "new">
    | <LENGTH: "length">
}

// Delimiters

TOKEN : {
    <LEFT_PARENTHESES: "(">
    | <RIGHT_PARENTHESES: ")">
    | <LEFT_BRACE: "{">
    | <RIGHT_BRACE: "}">
    | <LEFT_BRACKET: "[">
    | <RIGHT_BRACKET: "]">
    | <SEMICOLON: ";">
    | <COMMA: ",">
}

// Operators

TOKEN : {
    <ADD: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <ASSIGN: "=">
    | <DOT: ".">
    | <NOT: "!">
    | <AND: "&&">
    | <LT: "<">
}

// Symbols

TOKEN: {
    <IDENTIFIER:
        (["A"-"Z", "a"-"z", "$"](["0"-"9", "A"-"Z", "a"-"z", "$", "_"])*) |
        (["_"](["0"-"9", "A"-"Z", "a"-"z", "$", "_"])+)
    > |
    <INTEGER: (["0"-"9"])+>
}

SimpleNode Program(): {} {
    ImportDeclaration()
    ClassDeclaration()
    <EOF>
    { return jjtThis; }
}

void ImportDeclaration() #ImportDeclaration: {Token t;} {
    (<IMPORT> Identifier() (ImportMethod())* <SEMICOLON> )*
}

void ImportMethod() : {Token t;}{
    <DOT> Identifier()
}

void ClassDeclaration() #ClassDeclaration : {Token t;} {
    <CLASS> t=<IDENTIFIER> { jjtThis.put("name", t.image); } [ "extends" Identifier() #Extends ]
    <LEFT_BRACE>
        ClassBody()
    <RIGHT_BRACE>
}

void Identifier() #Identifier : {Token t;} {
    t=<IDENTIFIER> { jjtThis.put("name", t.image); }
}

void ClassBody() : {} {
    ( VarDeclaration() )* ( MethodDeclaration() )*
}

void VarDeclaration() #VarDeclaration : {Token t;} {
    Type() Identifier() {} <SEMICOLON>
}

void MethodDeclaration() #MethodDeclaration: {} {
    <PUBLIC>
    (
        (
            (<STATIC> <VOID> <MAIN>
            <LEFT_PARENTHESES> <STRING> <LEFT_BRACKET> <RIGHT_BRACKET> Identifier() #MainArg <RIGHT_PARENTHESES>) #Main <LEFT_BRACE>
            MethodBody() #MethodBody
        ) |
        (
            Type() Identifier() #FunctionName <LEFT_PARENTHESES>
            [ (Type() Identifier() #ArgName) ("," Type() Identifier() #ArgName  )* ]
            <RIGHT_PARENTHESES> <LEFT_BRACE>
            MethodBody() #MethodBody
            <RETURN> Expression() <SEMICOLON> #MethodReturn
        )
    )
    <RIGHT_BRACE> #Method
}

void MethodBody() #void : {} {
    ( LOOKAHEAD(2) VarDeclaration() )*
    ( Statement() )*
}

void Type() #void : {} {
    ( <INT> ((<LEFT_BRACKET><RIGHT_BRACKET> #IntArray) | {} #Int))
    | <BOOLEAN> #Boolean
    | Identifier()
}


void Statement() #void : {} {
    ( <LEFT_BRACE> ( Statement() )* <RIGHT_BRACE> )
    | IfStatement()
    | WhileStatement()
    | LOOKAHEAD(2) Assignment()
    | Expression() <SEMICOLON>
}

void IfStatement() #IfStatement : {} {
    <IF> <LEFT_PARENTHESES> Expression() <RIGHT_PARENTHESES>
        Statement()
    <ELSE>
        Statement()
}

void Assignment() #Assignment : {} {
    Identifier() #Identifier [ <LEFT_BRACKET> Expression() <RIGHT_BRACKET> ] <ASSIGN> Expression() <SEMICOLON>
}

void WhileStatement() #WhileStatement : {} {
    <WHILE> (
        <LEFT_PARENTHESES>
        | recoverError(
              new int[]{LEFT_BRACE, INTEGER, TRUE, FALSE, IDENTIFIER, THIS, NEW, NOT, LEFT_PARENTHESES},
              "Got '" + getToken(1).toString() + "' expected '(' token"
          )
    )

    try {
        Expression()
    }

    catch (ParseException e) {
        recoverError(
            new int[] {LEFT_BRACE, INTEGER, TRUE, FALSE, IDENTIFIER, THIS, NEW, NOT, LEFT_PARENTHESES},
            "Found invalid expression '" + e.currentToken + "'"
        );
    }

    (
        <RIGHT_PARENTHESES>
        | recoverError(
              new int[] {LEFT_BRACE, IF, WHILE, INTEGER, TRUE, FALSE, IDENTIFIER, THIS, NEW, NOT, LEFT_PARENTHESES},
              "Got '" + getToken(1).toString() + "' expected ')' token"
          )
    )

    try {
        Statement()
    }

    catch (ParseException e) {
        recoverError(new int[]{RIGHT_BRACE}, "Found invalid statement '" + e.currentToken + "'");
    }
}

JAVACODE
void recoverError(int[] skipTo, String msg) {
     ParseException e = generateParseException();

     Report report_error = Report.newError(Stage.SYNTATIC, e.currentToken.beginLine, e.currentToken.beginColumn, msg, e);

     this.reports.add(report_error);

     Token t = getToken(1);

     String skipped_tokens = "";
     boolean match = false;

     while (!match) {
         for (int matcher : skipTo) {
             if (t.kind == matcher) {
                match = true;
                break;
             }
         }

         if (!match) { // skip current token
             skipped_tokens += token.toString() + " ";
             getNextToken();
             t = getToken(1);
         }
     }
}

void Expression() #void: {} {
    LessThan() (<AND> LessThan() )*
}

void LessThan() #void : {} {
    AddSub() (<LT> AddSub() #Less_Than(2) )*
}

void AddSub() #void : {} {
    MultDiv() (<ADD> MultDiv() #AddSub(2) | <SUB> MultDiv() #AddSub(2)  )*
}

void MultDiv() #void : {} {
    Negate() (<MUL> Negate() #MultDiv(2) | <DIV> Negate() #MultDiv(2) )*
}

void Negate() #void : {}  {
    (<NOT> #Negate)*  Length()
}

void Length() #void: {} {
    Parentheses() (<DOT> Call() #DotOperation)*
}
/*void LessThan() #Less_Than : {} {
    AddSub() (<LT> AddSub() )* // TODO: Is it really * ?
}

void AddSub() #AddSub(2) : {} {
    MultDiv() (Operation() )*
}

void Operation() : {} {
    <ADD> MultDiv() {jjtThis.put("op", "PLUS");}
    | <SUB> MultDiv() {jjtThis.put("op", "MINUS");}
}

void MultDiv() #MultDiv(2) : {} {
    Negate() (<MUL> Negate() | <DIV> Negate() )*
}

void Negate() #void : {}  {
    (<NOT>)* #Negate DotOperation()
}

void DotOperation() #void: {} {
    Parentheses() (<DOT> Call() )* #DotOperation
}*/

void Parentheses() #void: {} {
    ( <LEFT_PARENTHESES> Expression() <RIGHT_PARENTHESES> ) |
    ( <LEFT_BRACKET> Expression() <RIGHT_BRACKET> ) |
    _Expression()
}

void Call() #void : {Token t;} {
    "length" #length |
    (t=<IDENTIFIER> {jjtThis.put("name", t.image);} #Call  <LEFT_PARENTHESES> [ Expression() ( <COMMA> Expression() )* ] <RIGHT_PARENTHESES> )
}

void _Expression() #void: {} {
    (
        Integer()
        | <TRUE> #True
        | <FALSE> #False
        | Identifier()
        | <THIS> #This
        | NewExpression() #NewExpression
    )
    __Expression()
}

void NewExpression(): {} {
    <NEW>
    (
        <INT> <LEFT_BRACKET> Expression() #IntArray <RIGHT_BRACKET> |
        <IDENTIFIER> #VarCreation <LEFT_PARENTHESES> <RIGHT_PARENTHESES>
    )
}

void __Expression() #void: {} {
     [ <LEFT_BRACKET> Expression() #Index <RIGHT_BRACKET> __Expression() ]
}

void Integer(): {Token value;} {
    value=<INTEGER> { jjtThis.put("value", value.image); }
}


/*void Bool(): {Token value;}{
    value=<TRUE> { jjtThis.put("value", value.image); }| value=<FALSE> #Bool { jjtThis.put("value", value.image); }
}*/
