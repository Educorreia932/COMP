options
{
    LOOKAHEAD=2;
    NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(Calculator)

public class Calculator {
     public static void main(String[] args) throws ParseException {
        System.out.println("Parser for a calculator that accepts expressions with integers, +,-,*,/,(,and ).");
        System.out.println("Write an arithmetic expression:");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // returns reference to root node

        root.dump(""); // Prints the tree on the screen

        System.out.println("Expression Value: "+myCalc.eval(root));
    }

    float eval(SimpleNode node) {
        if (node.jjtGetNumChildren() == 0) // Leaf node with integer value
            return node.val;

        else if(node.jjtGetNumChildren() == 1) // Only one child
            return this.eval((SimpleNode) node.jjtGetChild(0));

        SimpleNode lhs = (SimpleNode) node.jjtGetChild(0); // Left child
        SimpleNode rhs = (SimpleNode) node.jjtGetChild(1); // Right child

        switch(node.id) {
            case CalculatorTreeConstants.JJTADD:
                return eval(lhs) + eval(rhs);
            case CalculatorTreeConstants.JJTSUB:
                return eval(lhs) - eval(rhs);
            case CalculatorTreeConstants.JJTMUL:
                return eval(lhs) * eval(rhs);
            case CalculatorTreeConstants.JJTDIV:
                return eval(lhs) / eval(rhs);
            case CalculatorTreeConstants.JJTEQUALS:
                float value = eval(rhs);
                lhs.val = value;

                return value;
            default: // abort
                System.out.println("Illegal operator!");
                System.exit(1);
        }

        return 0;
    }
}

PARSER_END(Calculator)

SKIP :
{
    " " | "\r" | "\t"
}

TOKEN:
{
    < SYMBOL: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >
    | < INTEGER: (["0"-"9"])+ >
    | < LF: ["\n", ";"] >
}

SimpleNode Expression(): {}
{
    Expr0() <LF> {return jjtThis;} // Java code inside brackets
}

void Expr0(): {Token t;}
{
    (
        t=<SYMBOL> {jjtThis.value = t.image;} #Symbol
        "=" Expr1(1) #Equals(2)
    )
    | Expr1(1)
}

void Expr1(int sign): {}
{
     Expr2(sign)
     (
         ("+" Expr2(sign) #Add(2)
         | "-" Expr2(sign) #Sub(2))
     )*
}

void Expr2(int sign): {} // 1: positive; -1: negative, because of the ‘-‘ unitary operator
{
     Expr3(sign)
     (
        "*" Expr3(1) #Mul(2)
        | "/" Expr3(1) #Div(2)
     )*
}

void Expr3(int sign): {Token t;}
{
    t=<INTEGER> { jjtThis.val = sign * Integer.parseInt(t.image); } #Term
    | t=<SYMBOL> #Symbol
    | "-" Expr3(-1)
    | "(" Expr1(sign) ")"
}
