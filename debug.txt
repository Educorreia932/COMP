import io;
Binary  {
    .construct Binary().V {
        invokespecial(this, "<init>").V;
    }
    .method public division(a.i32, b.i32).i32 {
        quotient.i32 :=.i32 0.i32;
        if(1.i32 >=.i32 a.i32)goto else2;
            Loop0:
                aux0.bool :=.bool b.i32 <.i32 a.i32;
                if(aux0.bool!.bool aux0.bool) goto EndLoop0;
                    a.i32 :=.i32 a.i32 -.i32 b.i32;
                    a.i32 :=.i32 a.i32;
                    quotient.i32 :=.i32 quotient.i32 +.i32 1.i32;
                    quotient.i32 :=.i32 quotient.i32;
                if(b.i32 <.i32 a.i32) goto Loop0;
            EndLoop0:
                auxvar.i32 :=.i32 0.i32;
            aux1.i32 :=.i32 a.i32 +.i32 1.i32;
            if(b.i32 >=.i32 aux1.i32)goto else1;
                quotient.i32 :=.i32 quotient.i32 +.i32 1.i32;
                quotient.i32 :=.i32 quotient.i32;

            goto endif1;
            else1:
            endif1:
            auxvar.i32 :=.i32 0.i32;

        goto endif2;
        else2:
        endif2:
        auxvar.i32 :=.i32 0.i32;

        ret.i32 quotient.i32;
    }

    .method public modulo(a.i32, b.i32).i32 {
        aux0.Binary :=.Binary new(Binary).Binary;
        invokespecial(aux0.Binary,"<init>").V;
        aux1.i32:=.i32 invokevirtual(aux0.Binary, "division", a.i32, b.i32).i32;
        aux2.i32 :=.i32 b.i32 *.i32 aux1.i32;
        result.i32 :=.i32 a.i32 -.i32 aux2.i32;
        result.i32 :=.i32 result.i32;

        ret.i32 result.i32;
    }

    .method public pow(n.i32, exponent.i32).i32 {
        result.i32 :=.i32 1.i32;
        i.i32 :=.i32 exponent.i32;
        Loop3:
            aux0.bool :=.bool 0.i32 <.i32 i.i32;
            if(aux0.bool!.bool aux0.bool) goto EndLoop3;
                result.i32 :=.i32 result.i32 *.i32 n.i32;
                result.i32 :=.i32 result.i32;
                i.i32 :=.i32 i.i32 -.i32 1.i32;
                i.i32 :=.i32 i.i32;
            if(0.i32 <.i32 i.i32) goto Loop3;
        EndLoop3:
            auxvar.i32 :=.i32 0.i32;

        ret.i32 result.i32;
    }

    .method public equals(a.i32, b.i32).bool {

        aux0.bool :=.bool a.i32 <.i32 b.i32;
        aux1.bool :=.bool aux0.bool !.bool aux0.bool;
        aux2.bool :=.bool b.i32 <.i32 a.i32;
        aux3.bool :=.bool aux2.bool !.bool aux2.bool;
        aux4.bool :=.bool aux1.bool &&.bool aux3.bool;
        ret.bool aux4.bool;
    }

    .method public static main(args.array.String).V {
        aux0.Binary :=.Binary new(Binary).Binary;
        invokespecial(aux0.Binary,"<init>").V;
        binary.Binary :=.Binary aux0.Binary;
        aux1.i32 :=.i32 invokestatic(io, "read").i32;
        a.i32 :=.i32 aux1.i32;
        i.i32 :=.i32 0.i32;
        result.i32 :=.i32 0.i32;
        Loop4:
            aux2.bool:=.bool invokevirtual(binary.Binary, "equals", a.i32, 0.i32).bool;
            aux3.bool :-.boolaux2.bool;
            aux8.bool :=.bool 1.bool &&.bool aux3.bool;
            if(aux8.bool!.bool aux8.bool) goto EndLoop4;
                aux4.i32:=.i32 invokevirtual(binary.Binary, "modulo", a.i32, 2.i32).i32;
                aux5.i32:=.i32 invokevirtual(binary.Binary, "pow", 10.i32, i.i32).i32;
                aux6.i32 :=.i32 aux4.i32 *.i32 aux5.i32;
                result.i32 :=.i32 result.i32 +.i32 aux6.i32;
                result.i32 :=.i32 result.i32;
                aux7.i32:=.i32 invokevirtual(binary.Binary, "division", a.i32, 2.i32).i32;
                a.i32 :=.i32 aux7.i32;
                i.i32 :=.i32 i.i32 +.i32 1.i32;
                i.i32 :=.i32 i.i32;
            if(1.bool &&.bool aux3.bool) goto Loop4;
        EndLoop4:
            auxvar.i32 :=.i32 0.i32;
        invokestatic(io, "print", result.i32).V;

    }

}